module.exports.config = {
	name: "joinNoti",
	eventType: ["log:subscribe"],
	version: "1.0.4",
	credits: "Mirai Team",
	description: "Th√¥ng b√°o bot ho·∫∑c ng∆∞·ªùi v√†o nh√≥m",
	dependencies: {
		"fs-extra": ""
	}
};

module.exports.run = async function({ api, event, Users }) {
	const { join } = global.nodemodule["path"];
	const { threadID } = event;
	const fs = require ("fs-extra")
	if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {
		api.changeNickname(`[ ${global.config.PREFIX} ] ‚Ä¢ ${(!global.config.BOTNAME) ? "Bypass b·ªüi Mai Huy B·∫£o" : global.config.BOTNAME}`, threadID, api.getCurrentUserID());
		return api.sendMessage({body: `üå∏-ADMIN BOT *Evil Nguy·ªÖn* ƒê√£ Connected successfully BOT!üå∏\nüå∏-Vui L√≤ng H√£y B·∫•m Rankup 2 L·∫ßn ƒê·ªÉ T·∫Øtüå∏\nüå∏-Vui L√≤ng H√£y B·∫•m Resend 1 L·∫ßn ƒê·ªÉ T·∫Øtüå∏\nüå∏-C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng con bot n√†y, ch√∫c b·∫°n s·ª≠ d·ª•ng vui v·∫ª UwUüå∏\nüî•-Sau Khi Bot ƒê√£ ƒê∆∞·ª£c K·∫øt N·ªëi Xong Th√¨ Xin H√£y B·∫•m Chat ƒê·ª©ng 2 Ch·ªØ *Lu·∫≠t bot* M√† Xem Gi√∫p Gi√πm Trc C√°i R L√†m G√¨ Th√¨ L√†m Ch·ªâ C·∫ßn Chat T·ª´ *Lu·∫≠t bot* Kh√¥ng C·∫ßn X√†i L·ªánh V√¨ N√≥ L√† noprefix Tksüî•\nüî•-N·∫øu Mu·ªën Xem L·ªánh Th√¨ H√£y B·∫•m *Menu* Nh√©üî•`, attachment: fs.createReadStream(__dirname + "/cache/hi.gif") }, threadID);
	}
	else {
		try {
			const { createReadStream, existsSync, mkdirSync } = global.nodemodule["fs-extra"];
			let { threadName, participantIDs } = await api.getThreadInfo(threadID);

			const threadData = global.data.threadData.get(parseInt(threadID)) || {};
			const path = join(__dirname, "cache", "joinGif");
			const pathGif = join(path,`box3.gif`);

			var mentions = [], nameArray = [], memLength = [], i = 0;
			
			for (id in event.logMessageData.addedParticipants) {
				const userName = event.logMessageData.addedParticipants[id].fullName;
				nameArray.push(userName);
				mentions.push({ tag: userName, id });
				memLength.push(participantIDs.length - i++);

				if (!global.data.allUserID.includes(id)) {
					await Users.createData(id, { name: userName, data: {} });
					global.data.userName.set(id, userName);
					global.data.allUserID.push(id);
				}
			}
			memLength.sort((a, b) => a - b);
			
			(typeof threadData.customJoin == "undefined") ? msg = "Ch√†o m·ª´ng {name}.\nƒë√£ ƒë·∫øn v·ªõi {threadName} v∆∞∆°ng qu·ªëc xinh ƒë·∫πp n√†y üëë.\n{type} v√† l√† th√†nh vi√™n th·ª© {soThanhVien} c·ªßa nh√≥m \nMong b·∫°n t∆∞∆°ng t√°c t√≠ch c·ª±c ƒë·ªÉ kh√¥ng b·ªã l·ªçc nh·∫ßm nh√©ee üòç‚ô•" : msg = threadData.customJoin;
			msg = msg
			.replace(/\{name}/g, nameArray.join(', '))
			.replace(/\{type}/g, (memLength.length > 1) ?  'c√°c b·∫°n' : 'b·∫°n')
			.replace(/\{soThanhVien}/g, memLength.join(', '))
			.replace(/\{threadName}/g, threadName);

			if (existsSync(path)) mkdirSync(path, { recursive: true });

			if (existsSync(pathGif)) formPush = { body: msg, attachment: createReadStream(pathGif), mentions }
			else formPush = { body: msg, mentions }

			return api.sendMessage(formPush, threadID);
		} catch (e) { return console.log(e) };
	}
}
